function [state_matrix, input_matrix] = get6dCwhStateAndInputMatrices(dt,omega,mc)
%  Get 6-d CWH 
% matrices for discrete-time LTI CWH dynamics
% =============================================================================
%
% Get the discretized state and input matrices for the 6-d CWH system
%   
% Usage: Nested function
%
% =============================================================================
%
% Inputs:
% -------
%   params - Parameter struct
%
% Outputs:
% --------
%   state_matrix - Discrete-time LTI CWH state matrix
%   input_matrix - Discrete-time LTI CWH input matrix
%
% =============================================================================
%
%   This function is part of the Stochastic Reachability Toolbox.
%   License for the use of this function is given in
%        https://sreachtools.github.io/license/
% 

    % Continuous-time LTI CWH unforced dynamics e^{A_{cts}t}
    e_power_A_cts_t = @(t) [ 
        4 - 3 * cos(omega * t), ...
            0, ...
            0, ...
            (1/omega) * sin(omega * t), ...
            (2/omega) * (1 - cos(omega * t)), ...
            0; ...
        6 * (sin(omega * t) - omega * t), ...
            1, ...
            0, ...
            -(2/omega) * (1 - cos(omega * t)), ...
            (1/omega) * (4*sin(omega * t) - 3*omega * t), ...
            0; ...
        0, ...
            0, ...
            cos(omega * t), ...
            0, ...
            0, ...
            (1/omega) * sin(omega * t); ...
        3 * omega * sin(omega * t), ...
            0, ...
            0, ...
            cos(omega * t), ...
            2 * sin(omega * t), ...
            0; ...
        -6 * omega * (1 - cos(omega * t)), ...
            0, ...
            0, ...
            -2 * sin(omega * t), ...
            4 * cos(omega * t) - 3, ...
            0; ...
        0, ...
            0, ...
            -omega * sin(omega * t), ...
            0, ...
            0, ...
            cos(omega * t);
    ];
    % Discrete-time state matrix is Phi(T_s) for sampling time T_s since the
    % system is time-invariant
    state_matrix = e_power_A_cts_t(dt);

    % Continuous-time input matrix B_{cts}
    B_cts = 1/mc*[zeros(3);eye(3)];
    % Discrete-time input matrix is (\int_0^T e^{A_{cts}\tau} d\tau) B_cts
    input_matrix = integral(e_power_A_cts_t, ...
                            0, ...
                            dt, ...
                            'ArrayValued', true) * B_cts;
end